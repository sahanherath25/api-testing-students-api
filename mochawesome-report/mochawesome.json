{
  "stats": {
    "suites": 4,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-07T08:42:14.416Z",
    "end": "2025-03-07T08:42:18.682Z",
    "duration": 4266,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "84b364b9-ff68-42ac-80d0-3f03b4660600",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1253,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "//    TODO Connecting to DB\n      try {\n          await mongoose.connect(QUERY)\n          console.log(\"Connected to DB EMMA\")\n        }catch (e) {\n          console.log(\"Error \",e)\n        }",
          "err": {},
          "uuid": "fb11c85a-2304-4072-aa9a-14a2a79c0aff",
          "parentUUID": "84b364b9-ff68-42ac-80d0-3f03b4660600",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 131,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "//    TODO Disconnecting DB\n    const deletedUser = await User.findOneAndDelete({email: \"calista@gmail.com\"})\n    mongoose.disconnect()",
          "err": {},
          "uuid": "6c568689-3829-434d-914e-8837e7b9212a",
          "parentUUID": "84b364b9-ff68-42ac-80d0-3f03b4660600",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "031c0ad5-42e3-49d6-8f1b-4053b744246d",
          "title": "Crete User",
          "fullFile": "C:\\Users\\sahan\\Desktop\\My Programming Notes\\Node JS Projects\\API Projects\\mocha-chai-api\\test\\createUser_test.js",
          "file": "\\test\\createUser_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a single user",
              "fullTitle": "Crete User should create a single user",
              "timedOut": false,
              "duration": 763,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser={\n    \"name\":\"Emma Watson\",\n    \"email\":\"emmaw@gmail.com\",\n    \"password\":\"emma123\",\n    \"passwordConfirm\":\"emma123\"\n}\ntry {\n    const user=await User.create(newUser);\n    // console.log(\"NEW USER CREAED IS \",user)\n}catch (e) {\n    console.log(\"Error \",e)\n}",
              "err": {},
              "uuid": "880d64b6-8531-48fa-a5e2-070d8abac113",
              "parentUUID": "031c0ad5-42e3-49d6-8f1b-4053b744246d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "880d64b6-8531-48fa-a5e2-070d8abac113"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 763,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b0cc34b5-59a9-41fb-8b51-221794354e49",
          "title": "Delete User",
          "fullFile": "C:\\Users\\sahan\\Desktop\\My Programming Notes\\Node JS Projects\\API Projects\\mocha-chai-api\\test\\deleteUser_test.js",
          "file": "\\test\\deleteUser_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete a single user",
              "fullTitle": "Delete User should delete a single user",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const deleteUser= await User.findOneAndDelete({name:\"Emma Watson\"})\n}catch (e) {\n    console.log(\"Error \",e)\n}",
              "err": {},
              "uuid": "eea2a6dd-a6d8-4cfa-9fea-ec3ad7fd8bbc",
              "parentUUID": "b0cc34b5-59a9-41fb-8b51-221794354e49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eea2a6dd-a6d8-4cfa-9fea-ec3ad7fd8bbc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 144,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d9372716-87fb-44ab-a642-77c7abb6bd6a",
          "title": "Get Users",
          "fullFile": "C:\\Users\\sahan\\Desktop\\My Programming Notes\\Node JS Projects\\API Projects\\mocha-chai-api\\test\\read_user.js",
          "file": "\\test\\read_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get sucess for get ",
              "fullTitle": "Get Users should get sucess for get ",
              "timedOut": false,
              "duration": 166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response=await axios.get(\"http://127.0.0.1:3003/api/v1/users\")\n        assert.strictEqual(response.statusText,\"OK\")",
              "err": {},
              "uuid": "fa1475fe-e7ec-433e-b5f1-34afb9f98859",
              "parentUUID": "d9372716-87fb-44ab-a642-77c7abb6bd6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should connect with 200",
              "fullTitle": "Get Users should connect with 200",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response=await axios.get(\"http://127.0.0.1:3003/api/v1/users\")\n        assert.strictEqual(response.status,200)",
              "err": {},
              "uuid": "179012c6-027b-465b-ab37-104151c93a99",
              "parentUUID": "d9372716-87fb-44ab-a642-77c7abb6bd6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get one user calista and Reading Her Data",
              "fullTitle": "Get Users should get one user calista and Reading Her Data",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser=JSON.parse(`{\n            \"name\":\"Calista MMae\",\n            \"email\":\"calista@gmail.com\",\n                \"password\":\"emma123\",\n                \"passwordConfirm\":\"emma123\"\n            }`\n        )\n        const user=await User.create(newUser)\n        const newUsers =await User.findOne({name: newUser.name})\n        assert.strictEqual(newUsers.name, user.name)",
              "err": {},
              "uuid": "4ec48a65-9f2a-4d95-a0c7-d980cf12b163",
              "parentUUID": "d9372716-87fb-44ab-a642-77c7abb6bd6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get All Users",
              "fullTitle": "Get Users should get All Users",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const allUsers=await User.find();\n            assert.equal(allUsers.length,2)",
              "err": {},
              "uuid": "55686093-f9e9-4a82-b046-556124eb03f8",
              "parentUUID": "d9372716-87fb-44ab-a642-77c7abb6bd6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get have properties ",
              "fullTitle": "Get Users should get have properties ",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userFound=await User.findOne({email:\"calista@gmail.com\"});\n        console.log(\"OBJ TYPE \",typeof userFound)\n        const objUser=userFound.toObject(); \n        console.log(\"USER \",Object.hasOwn(objUser,\"email\"))\n        console.log(\"USER \",Reflect.has(userFound, 'email'))\n        console.log(userFound.toObject().hasOwnProperty('email')); // true\n        let email=Reflect.has(userFound, 'email')\n        let name=Reflect.has(userFound, 'name')\n        assert.strictEqual (email,true )\n        assert.strictEqual (name,true )",
              "err": {},
              "uuid": "9263f5d9-df7d-4123-ba33-f51d305897cc",
              "parentUUID": "d9372716-87fb-44ab-a642-77c7abb6bd6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa1475fe-e7ec-433e-b5f1-34afb9f98859",
            "179012c6-027b-465b-ab37-104151c93a99",
            "4ec48a65-9f2a-4d95-a0c7-d980cf12b163",
            "55686093-f9e9-4a82-b046-556124eb03f8",
            "9263f5d9-df7d-4123-ba33-f51d305897cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 735,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "51bdda57-1e53-417c-b214-9b8c6a3afe90",
          "title": "All in One Test",
          "fullFile": "C:\\Users\\sahan\\Desktop\\My Programming Notes\\Node JS Projects\\API Projects\\mocha-chai-api\\test\\zAll_test.js",
          "file": "\\test\\zAll_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create new user",
              "fullTitle": "All in One Test should create new user",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userData = {\n            \"name\": \"Angela Yu\",\n            \"email\": \"angela21@gmail.com\",\n            \"password\": \"angela123\",\n            \"passwordConfirm\": \"angela123\"\n        }\n        const response = await axios.post(\"http://127.0.0.1:3003/api/v1/users\", userData)\n        // console.log(\"RES \",response)\n        assert.strictEqual(response.status,201)\n        const createUser = response.data.data.user\n        expect(createUser).to.be.an(\"object\");\n        expect(createUser).to.have.property(\"name\")\n        expect(createUser).to.have.property(\"email\")\n        expect(createUser).to.have.property(\"password\")",
              "err": {},
              "uuid": "5bdee1f5-a8e3-4c8e-930a-c3693f941033",
              "parentUUID": "51bdda57-1e53-417c-b214-9b8c6a3afe90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should avoid creating user without name",
              "fullTitle": "All in One Test should avoid creating user without name",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n            const userData = {\n                \"email\": \"angela21@gmail.com\",\n                \"password\": \"angela123\",\n                \"passwordConfirm\": \"angela123\"\n            }\n            const response = await axios.post(\"http://127.0.0.1:3003/api/v1/users\", userData)\n            // console.log(\"RES \",response)\n            const createUser = response.data.data.user\n            expect(response.status).not.to.be.equal(201)\n        } catch (e) {\n            console.log(\"MIDDLEWARE ERROR \",e.response.data.error.name)\n            expect(e.response.status).to.be.equal(401)\n            expect(e.response.data.error.name).to.include('User validation failed: name: User Name Must be Required');\n        }",
              "err": {},
              "uuid": "ed790b00-fc1d-4644-9a5e-cb43a0600fde",
              "parentUUID": "51bdda57-1e53-417c-b214-9b8c6a3afe90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get created  user",
              "fullTitle": "All in One Test should get created  user",
              "timedOut": false,
              "duration": 259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = await User.findOne({name: \"Angela Yu\"})\n        const response = await axios.get(`http://127.0.0.1:3003/api/v1/users/${user._id}`)\n        const receivedUser = response.data.data.user\n        // console.log(\"SAHAN \",receivedUser)\n        //TODO Checking Properties Exists\n        receivedUser.should.have.property(\"name\")\n        receivedUser.should.have.property(\"email\")\n        receivedUser.should.have.property(\"password\")\n        receivedUser.should.have.property(\"password\")\n        //TODO Comparing to value to be equal\n        expect(user.name).to.be.equal(\"Angela Yu\")\n        expect(response.status).to.be.equal(200)\n        // expect(response.message).to.be.equal(\"\")\n        expect(response.statusText).to.be.equal(\"OK\")\n        console.log(\"MESSAGE \", response.status)\n        expect(user).to.be.an(\"object\")",
              "err": {},
              "uuid": "f6fc3864-0e3d-4ab9-a4fa-dcffdc908ef2",
              "parentUUID": "51bdda57-1e53-417c-b214-9b8c6a3afe90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update email of created ",
              "fullTitle": "All in One Test should update email of created ",
              "timedOut": false,
              "duration": 262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// const user =await User.findOneAndUpdate({name:\"Angela Yu\"},{$set:{email:\"flourish19@gmail.com\"},},{new:true})\n        const user = await User.findOne({name: \"Angela Yu\"})\n        const response = await axios.put(`http://127.0.0.1:3003/api/v1/users/${user.id}`, {\n            name: \"Flourish\",\n            email: \"flourish911@gmail.com\"\n        })\n        const receivedUser = response.data.data.user\n        // console.log(\"RESPONSE \",response)\n        // RESPONSE  {\n        //     status: 'success',\n        //         data: {\n            //         user: {\n            //             _id: '67c3facd50d2617160159acf',\n            //                 name: 'Flourish',\n            //                 email: 'flourish911@gmail.com',\n            //                 password: 'angela123',\n            //                 passwordConfirm: 'angela123',\n            //                 date: '2025-03-02T06:29:33.632Z',\n            //                 __v: 0\n            //         }\n        //     }\n        // }\n        assert.strictEqual(\"flourish911@gmail.com\", receivedUser.email)",
              "err": {},
              "uuid": "e4bd1e10-4432-42bd-9be5-fd0452375863",
              "parentUUID": "51bdda57-1e53-417c-b214-9b8c6a3afe90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update email of Flourish  ",
              "fullTitle": "All in One Test should update email of Flourish  ",
              "timedOut": false,
              "duration": 277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// const user =await User.findOneAndUpdate({name:\"Angela Yu\"},{$set:{email:\"flourish19@gmail.com\"},},{new:true})\n        const payload={\n            email:\"flourish911@gmail.com\"\n        }\n        const user = await User.findOne(payload)\n        const response = await axios.put(`http://127.0.0.1:3003/api/v1/users/${user.id}`, {\n            name: \"Flourish\",\n            email: \"flourish25@gmail.com\"\n        })\n        console.log(\"MY RESPONSE \" ,response.data.data.user)\n        expect(response.data.data.user.email).should.not.to.be.equal(payload.email)\n        // expect(response.data.data.user.email).to.be.equal(payload.email)",
              "err": {},
              "uuid": "4bc6cf20-9733-47bb-83b0-b121640c38a3",
              "parentUUID": "51bdda57-1e53-417c-b214-9b8c6a3afe90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created user ",
              "fullTitle": "All in One Test should delete created user ",
              "timedOut": false,
              "duration": 254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = await User.findOne({name: \"Flourish\"})\n        const response = await axios.delete(`http://127.0.0.1:3003/api/v1/users/${user._id}`)\n        // const response=await axios.delete(`http://127.0.0.1:3003/api/v1/users`)\n        console.log(\"DELETED USER \", response.status)\n        console.log(\"DELETED USER  DATA \", response.data.data)\n        assert.strictEqual(\"flourish25@gmail.com\", user.email)",
              "err": {},
              "uuid": "403068d2-bbe9-4575-8519-abde9d282113",
              "parentUUID": "51bdda57-1e53-417c-b214-9b8c6a3afe90",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5bdee1f5-a8e3-4c8e-930a-c3693f941033",
            "ed790b00-fc1d-4644-9a5e-cb43a0600fde",
            "f6fc3864-0e3d-4ab9-a4fa-dcffdc908ef2",
            "e4bd1e10-4432-42bd-9be5-fd0452375863",
            "4bc6cf20-9733-47bb-83b0-b121640c38a3",
            "403068d2-bbe9-4575-8519-abde9d282113"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1201,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}